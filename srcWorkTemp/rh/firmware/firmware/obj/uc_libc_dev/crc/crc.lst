   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"crc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.crc16_Right,"ax",%progbits
  19              		.align	1
  20              		.thumb
  21              		.thumb_func
  23              	crc16_Right:
  24              	.LFB1:
  25              		.file 1 "uc_libc_dev/crc/crc.c"
   1:uc_libc_dev/crc/crc.c **** /*
   2:uc_libc_dev/crc/crc.c **** Atualizado em 17/03/2015
   3:uc_libc_dev/crc/crc.c **** 
   4:uc_libc_dev/crc/crc.c **** Autor Diego Fontana
   5:uc_libc_dev/crc/crc.c **** 
   6:uc_libc_dev/crc/crc.c **** leia-me
   7:uc_libc_dev/crc/crc.c **** 
   8:uc_libc_dev/crc/crc.c **** 	o calculo do CRC eh feito em cima dos polinomios, como por exemplo o
   9:uc_libc_dev/crc/crc.c **** MODBUS, ele utiliza o polinomio "X^16+X^15+X^2+X^0" que em hexa é 0x8005,
  10:uc_libc_dev/crc/crc.c **** as rotinas de calculos de CRC precisam de um valor inicial par ao CRC
  11:uc_libc_dev/crc/crc.c **** é do polinomio, o CRC é calculado em cima de cada BYTE do pacote.
  12:uc_libc_dev/crc/crc.c **** 
  13:uc_libc_dev/crc/crc.c **** 	Existem duas forma de calcular o CRC, uma rotacionando para diretira
  14:uc_libc_dev/crc/crc.c **** e outra para esquerda, aqui temos duas duas rotinas genéricas:
  15:uc_libc_dev/crc/crc.c **** 	crc16_Right: calcula o CRC de modo Rigth Shifted
  16:uc_libc_dev/crc/crc.c **** 	crc16_Left: calcula o CRC de modo Left Shifted
  17:uc_libc_dev/crc/crc.c **** 
  18:uc_libc_dev/crc/crc.c **** 	Por algum motivo que eu ainda nao sei, cada sistema utiliza sua proprio
  19:uc_libc_dev/crc/crc.c **** combinação de crc16_Right ou crc16_Left, polinomio e valor inicial.
  20:uc_libc_dev/crc/crc.c **** 
  21:uc_libc_dev/crc/crc.c **** 	O detalhe na rotina crc16_Right (Right Shifted) é que o polinomio utilizado
  22:uc_libc_dev/crc/crc.c **** deve estar espelhado, por exemplo o MODBUS utiliza o valor 0x8005, portando
  23:uc_libc_dev/crc/crc.c **** o polinomio real a ser calculado na rotina é 0xA001. Por isso a função crc16_Poly
  24:uc_libc_dev/crc/crc.c **** faz o espelhamento do polinomio, ajustando para o uso correto.
  25:uc_libc_dev/crc/crc.c **** 
  26:uc_libc_dev/crc/crc.c **** 	O calculo do CRC para DNP3 é um pouco mais estranho, se for avaliado
  27:uc_libc_dev/crc/crc.c **** o CRC de byte a byte ele fecha com a tabela encontrada neste site
  28:uc_libc_dev/crc/crc.c **** http://www.experts-exchange.com/Programming/Languages/Visual_Basic/Q_11722859.html
  29:uc_libc_dev/crc/crc.c **** mas o valor final utilizado deve ser aplicado complemento "~" e os BYTES da word
  30:uc_libc_dev/crc/crc.c **** estão com os valores ALTO e BAIXO trocados.
  31:uc_libc_dev/crc/crc.c **** 
  32:uc_libc_dev/crc/crc.c **** 	[REFERENCIAS]
  33:uc_libc_dev/crc/crc.c **** 
  34:uc_libc_dev/crc/crc.c **** 	http://en.wikipedia.org/wiki/Cyclic_redundancy_check
  35:uc_libc_dev/crc/crc.c **** 	http://www.lammertbies.nl/comm/info/crc-calculation.html
  36:uc_libc_dev/crc/crc.c **** 	http://ghsi.de/CRC/
  37:uc_libc_dev/crc/crc.c **** 
  38:uc_libc_dev/crc/crc.c **** */
  39:uc_libc_dev/crc/crc.c **** 
  40:uc_libc_dev/crc/crc.c **** #include "crc.h"
  41:uc_libc_dev/crc/crc.c **** 
  42:uc_libc_dev/crc/crc.c **** static u16 crc16_Poly(u16 poly);
  43:uc_libc_dev/crc/crc.c **** static u16 crc16_Right(void* data, int length, u16 poly, u16 init);
  44:uc_libc_dev/crc/crc.c **** static u16 crc16_Left(void* data, int length, u16 poly, u16 init);
  45:uc_libc_dev/crc/crc.c **** 
  46:uc_libc_dev/crc/crc.c **** //cria espelho do polinomio
  47:uc_libc_dev/crc/crc.c **** static u16 crc16_Poly (u16 poly) {
  48:uc_libc_dev/crc/crc.c ****     u16 i, r = 0;
  49:uc_libc_dev/crc/crc.c ****     for (i=0;i<16;i++) {
  50:uc_libc_dev/crc/crc.c ****         r = r << 1;
  51:uc_libc_dev/crc/crc.c ****         r = r | (poly&1);
  52:uc_libc_dev/crc/crc.c ****         poly = poly >> 1;
  53:uc_libc_dev/crc/crc.c ****     }
  54:uc_libc_dev/crc/crc.c ****     return r;
  55:uc_libc_dev/crc/crc.c **** }
  56:uc_libc_dev/crc/crc.c **** 
  57:uc_libc_dev/crc/crc.c **** //16bits CRC right shifted
  58:uc_libc_dev/crc/crc.c **** //data = buffer de bytes a serem calculados
  59:uc_libc_dev/crc/crc.c **** //length = quantidade de bytes
  60:uc_libc_dev/crc/crc.c **** //poly = polinomio original
  61:uc_libc_dev/crc/crc.c **** //init = valor inicial do crc
  62:uc_libc_dev/crc/crc.c **** static u16 crc16_Right(void* data, int length, u16 poly, u16 init) {
  26              		.loc 1 62 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38              		.loc 1 62 0
  39 0002 1025     		movs	r5, #16
  48:uc_libc_dev/crc/crc.c ****     u16 i, r = 0;
  40              		.loc 1 48 0
  41 0004 0024     		movs	r4, #0
  42              	.LVL1:
  43              	.L2:
  44              	.LBB4:
  45              	.LBB5:
  50:uc_libc_dev/crc/crc.c ****         r = r << 1;
  46              		.loc 1 50 0
  47 0006 6400     		lsls	r4, r4, #1
  48 0008 013D     		subs	r5, r5, #1
  49              	.LBE5:
  51:uc_libc_dev/crc/crc.c ****         r = r | (poly&1);
  50              		.loc 1 51 0
  51 000a 02F00106 		and	r6, r2, #1
  52              	.LBB6:
  50:uc_libc_dev/crc/crc.c ****         r = r << 1;
  53              		.loc 1 50 0
  54 000e A4B2     		uxth	r4, r4
  55              	.LVL2:
  56 0010 ADB2     		uxth	r5, r5
  57              	.LBE6:
  51:uc_libc_dev/crc/crc.c ****         r = r | (poly&1);
  58              		.loc 1 51 0
  59 0012 3443     		orrs	r4, r4, r6
  60              	.LVL3:
  61              	.LBB7:
  52:uc_libc_dev/crc/crc.c ****         poly = poly >> 1;
  62              		.loc 1 52 0
  63 0014 5208     		lsrs	r2, r2, #1
  64              	.LVL4:
  49:uc_libc_dev/crc/crc.c ****     for (i=0;i<16;i++) {
  65              		.loc 1 49 0
  66 0016 002D     		cmp	r5, #0
  67 0018 F5D1     		bne	.L2
  68              	.LVL5:
  69              		.loc 1 62 0
  70 001a 4118     		adds	r1, r0, r1
  71              	.LVL6:
  72              	.LBE7:
  73              	.LBE4:
  63:uc_libc_dev/crc/crc.c **** 	u16 i, crc = init;
  64:uc_libc_dev/crc/crc.c **** 	u8 * p = data;
  74              		.loc 1 64 0
  75 001c 0246     		mov	r2, r0
  76              	.LVL7:
  63:uc_libc_dev/crc/crc.c **** 	u16 i, crc = init;
  77              		.loc 1 63 0
  78 001e 1846     		mov	r0, r3
  79              	.LVL8:
  65:uc_libc_dev/crc/crc.c **** 	poly = crc16_Poly(poly);
  66:uc_libc_dev/crc/crc.c **** 	while (length--) {
  80              		.loc 1 66 0
  81 0020 0EE0     		b	.L3
  82              	.LVL9:
  83              	.L7:
  67:uc_libc_dev/crc/crc.c **** 		crc = crc ^ (*p++);
  84              		.loc 1 67 0
  85 0022 12F8013B 		ldrb	r3, [r2], #1	@ zero_extendqisi2
  86              	.LVL10:
  87 0026 5840     		eors	r0, r0, r3
  88              	.LVL11:
  89 0028 0823     		movs	r3, #8
  90              	.LVL12:
  91              	.L6:
  68:uc_libc_dev/crc/crc.c **** 		for (i = 0; i < 8; i++)
  69:uc_libc_dev/crc/crc.c **** 			crc = (crc & 0x0001) ? (crc >> 1) ^ poly : (crc >> 1);
  92              		.loc 1 69 0
  93 002a 10F0010F 		tst	r0, #1
  94 002e 4FEA5000 		lsr	r0, r0, #1
  95 0032 80B2     		uxth	r0, r0
  96 0034 18BF     		it	ne
  97 0036 6040     		eorne	r0, r0, r4
  98              	.LVL13:
  99 0038 013B     		subs	r3, r3, #1
 100 003a 9BB2     		uxth	r3, r3
  68:uc_libc_dev/crc/crc.c **** 		for (i = 0; i < 8; i++)
 101              		.loc 1 68 0
 102 003c 002B     		cmp	r3, #0
 103 003e F4D1     		bne	.L6
 104              	.LVL14:
 105              	.L3:
  66:uc_libc_dev/crc/crc.c **** 	while (length--) {
 106              		.loc 1 66 0 discriminator 1
 107 0040 8A42     		cmp	r2, r1
 108 0042 EED1     		bne	.L7
  70:uc_libc_dev/crc/crc.c **** 	}
  71:uc_libc_dev/crc/crc.c **** 	return crc;
  72:uc_libc_dev/crc/crc.c **** }
 109              		.loc 1 72 0
 110 0044 70BD     		pop	{r4, r5, r6, pc}
 111              		.cfi_endproc
 112              	.LFE1:
 114              		.section	.text.crc16_NBR14522,"ax",%progbits
 115              		.align	1
 116              		.global	crc16_NBR14522
 117              		.thumb
 118              		.thumb_func
 120              	crc16_NBR14522:
 121              	.LFB3:
  73:uc_libc_dev/crc/crc.c **** 
  74:uc_libc_dev/crc/crc.c **** //16bits CRC left shifted
  75:uc_libc_dev/crc/crc.c **** //data = buffer de bytes a serem calculados
  76:uc_libc_dev/crc/crc.c **** //length = quantidade de bytes
  77:uc_libc_dev/crc/crc.c **** //poly = polinomio original
  78:uc_libc_dev/crc/crc.c **** //init = valor inicial do crc
  79:uc_libc_dev/crc/crc.c **** static u16 crc16_Left(void* data, int length, u16 poly, u16 init) {
  80:uc_libc_dev/crc/crc.c **** 	u16 i, crc = init;
  81:uc_libc_dev/crc/crc.c **** 	u8 * p = data;
  82:uc_libc_dev/crc/crc.c **** 	while (length--) {
  83:uc_libc_dev/crc/crc.c **** 		crc = crc ^ (*p++<<8);
  84:uc_libc_dev/crc/crc.c **** 		for (i = 0; i < 8; i++)
  85:uc_libc_dev/crc/crc.c **** 			crc = (crc & 0x8000) ? (crc << 1) ^ poly : (crc << 1);
  86:uc_libc_dev/crc/crc.c **** 	}
  87:uc_libc_dev/crc/crc.c **** 	return crc;
  88:uc_libc_dev/crc/crc.c **** }
  89:uc_libc_dev/crc/crc.c **** 
  90:uc_libc_dev/crc/crc.c **** //---------------------------------------------------------------------
  91:uc_libc_dev/crc/crc.c **** // CRC: aplicações práticas
  92:uc_libc_dev/crc/crc.c **** //---------------------------------------------------------------------
  93:uc_libc_dev/crc/crc.c **** 
  94:uc_libc_dev/crc/crc.c **** //poly = x16 + x15 + x2 + x0 = 0x8005
  95:uc_libc_dev/crc/crc.c **** u16 crc16_NBR14522(void * data, int length) {
 122              		.loc 1 95 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              		@ link register save eliminated.
 127              	.LVL15:
  96:uc_libc_dev/crc/crc.c **** 	return crc16_Right( data, length, 0x8005, 0x0000);
 128              		.loc 1 96 0
 129 0000 48F20502 		movw	r2, #32773
 130 0004 0023     		movs	r3, #0
  97:uc_libc_dev/crc/crc.c **** }
 131              		.loc 1 97 0
  96:uc_libc_dev/crc/crc.c **** 	return crc16_Right( data, length, 0x8005, 0x0000);
 132              		.loc 1 96 0
 133 0006 FFF7FEBF 		b	crc16_Right
 134              	.LVL16:
 135              		.cfi_endproc
 136              	.LFE3:
 138              		.section	.text.crc16_MODBUS,"ax",%progbits
 139              		.align	1
 140              		.global	crc16_MODBUS
 141              		.thumb
 142              		.thumb_func
 144              	crc16_MODBUS:
 145              	.LFB4:
  98:uc_libc_dev/crc/crc.c **** 
  99:uc_libc_dev/crc/crc.c **** //poly = x16 + x15 + x2 + x0 = 0x8005
 100:uc_libc_dev/crc/crc.c **** u16 crc16_MODBUS(void * data, int length) {
 146              		.loc 1 100 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              		@ link register save eliminated.
 151              	.LVL17:
 101:uc_libc_dev/crc/crc.c **** 	return crc16_Right( data, length, 0x8005, 0xFFFF );
 152              		.loc 1 101 0
 153 0000 48F20502 		movw	r2, #32773
 154 0004 4FF6FF73 		movw	r3, #65535
 102:uc_libc_dev/crc/crc.c **** }
 155              		.loc 1 102 0
 101:uc_libc_dev/crc/crc.c **** 	return crc16_Right( data, length, 0x8005, 0xFFFF );
 156              		.loc 1 101 0
 157 0008 FFF7FEBF 		b	crc16_Right
 158              	.LVL18:
 159              		.cfi_endproc
 160              	.LFE4:
 162              		.section	.text.crc16_XMODEM,"ax",%progbits
 163              		.align	1
 164              		.global	crc16_XMODEM
 165              		.thumb
 166              		.thumb_func
 168              	crc16_XMODEM:
 169              	.LFB5:
 103:uc_libc_dev/crc/crc.c **** 
 104:uc_libc_dev/crc/crc.c **** //poly = x16 + x12 + x5 + x0 = 0x1021
 105:uc_libc_dev/crc/crc.c **** u16 crc16_XMODEM(void * data, int length) {
 170              		.loc 1 105 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              	.LVL19:
 175              	.LBB10:
 176              	.LBB11:
 177 0000 0023     		movs	r3, #0
 178              	.LBE11:
 179              	.LBE10:
 180 0002 30B5     		push	{r4, r5, lr}
 181              	.LCFI1:
 182              		.cfi_def_cfa_offset 12
 183              		.cfi_offset 4, -12
 184              		.cfi_offset 5, -8
 185              		.cfi_offset 14, -4
 186              		.loc 1 105 0
 187 0004 0546     		mov	r5, r0
 188              	.LVL20:
 189              	.LBB13:
 190              	.LBB12:
  80:uc_libc_dev/crc/crc.c **** 	u16 i, crc = init;
 191              		.loc 1 80 0
 192 0006 1846     		mov	r0, r3
 193              	.LVL21:
 194 0008 13E0     		b	.L13
 195              	.LVL22:
 196              	.L17:
  83:uc_libc_dev/crc/crc.c **** 		crc = crc ^ (*p++<<8);
 197              		.loc 1 83 0
 198 000a EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 199 000c 80EA0220 		eor	r0, r0, r2, lsl #8
 200              	.LVL23:
 201 0010 0822     		movs	r2, #8
 202              	.LVL24:
 203              	.L16:
  85:uc_libc_dev/crc/crc.c **** 			crc = (crc & 0x8000) ? (crc << 1) ^ poly : (crc << 1);
 204              		.loc 1 85 0
 205 0012 10F4004F 		tst	r0, #32768
 206 0016 4FEA4004 		lsl	r4, r0, #1
 207 001a 1DBF     		ittte	ne
 208 001c 84F48150 		eorne	r0, r4, #4128
 209 0020 80F00100 		eorne	r0, r0, #1
 210 0024 80B2     		uxthne	r0, r0
 211 0026 A0B2     		uxtheq	r0, r4
 212              	.LVL25:
 213 0028 013A     		subs	r2, r2, #1
 214 002a 92B2     		uxth	r2, r2
  84:uc_libc_dev/crc/crc.c **** 		for (i = 0; i < 8; i++)
 215              		.loc 1 84 0
 216 002c 002A     		cmp	r2, #0
 217 002e F0D1     		bne	.L16
 218 0030 0133     		adds	r3, r3, #1
 219              	.LVL26:
 220              	.L13:
  82:uc_libc_dev/crc/crc.c **** 	while (length--) {
 221              		.loc 1 82 0
 222 0032 8B42     		cmp	r3, r1
 223 0034 E9D1     		bne	.L17
 224              	.LBE12:
 225              	.LBE13:
 106:uc_libc_dev/crc/crc.c **** 	return crc16_Left( data, length, 0x1021, 0x0000 );
 107:uc_libc_dev/crc/crc.c **** }
 226              		.loc 1 107 0
 227 0036 30BD     		pop	{r4, r5, pc}
 228              		.cfi_endproc
 229              	.LFE5:
 231              		.section	.text.crc16_DNP3,"ax",%progbits
 232              		.align	1
 233              		.global	crc16_DNP3
 234              		.thumb
 235              		.thumb_func
 237              	crc16_DNP3:
 238              	.LFB6:
 108:uc_libc_dev/crc/crc.c **** 
 109:uc_libc_dev/crc/crc.c **** //poly = x16 + x13 + x12 + x11 + x10 + x8 + x6 + x5 + x2 + x0  = 0x3D65
 110:uc_libc_dev/crc/crc.c **** u16 crc16_DNP3(void * data, int length) {
 239              		.loc 1 110 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243              	.LVL27:
 244 0000 08B5     		push	{r3, lr}
 245              	.LCFI2:
 246              		.cfi_def_cfa_offset 8
 247              		.cfi_offset 3, -8
 248              		.cfi_offset 14, -4
 111:uc_libc_dev/crc/crc.c **** 	//calcula e depois aplica o complemento
 112:uc_libc_dev/crc/crc.c ****     u16 r = ~crc16_Right( data, length, 0x3D65, 0x0000 );
 249              		.loc 1 112 0
 250 0002 43F66552 		movw	r2, #15717
 251 0006 0023     		movs	r3, #0
 252 0008 FFF7FEFF 		bl	crc16_Right
 253              	.LVL28:
 254 000c C043     		mvns	r0, r0
 255 000e 80B2     		uxth	r0, r0
 256              	.LVL29:
 113:uc_libc_dev/crc/crc.c ****     //troca os bytes
 114:uc_libc_dev/crc/crc.c ****     return (r>>8)|(r<<8);
 257              		.loc 1 114 0
 258 0010 030A     		lsrs	r3, r0, #8
 259 0012 43EA0020 		orr	r0, r3, r0, lsl #8
 260              	.LVL30:
 115:uc_libc_dev/crc/crc.c **** }
 261              		.loc 1 115 0
 262 0016 80B2     		uxth	r0, r0
 263 0018 08BD     		pop	{r3, pc}
 264              		.cfi_endproc
 265              	.LFE6:
 267              		.section	.text.crc7,"ax",%progbits
 268              		.align	1
 269              		.global	crc7
 270              		.thumb
 271              		.thumb_func
 273              	crc7:
 274              	.LFB7:
 116:uc_libc_dev/crc/crc.c **** 
 117:uc_libc_dev/crc/crc.c **** //texe(33F): 350us/100bytes [data 18.01.12]
 118:uc_libc_dev/crc/crc.c **** //texe(32MX): 137us/100bytes [data 24.01.12]
 119:uc_libc_dev/crc/crc.c **** //X^7+X^3+X^0 = 0x09
 120:uc_libc_dev/crc/crc.c **** u8 crc7(void * data, int length) {
 275              		.loc 1 120 0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279              	.LVL31:
 280 0000 30B5     		push	{r4, r5, lr}
 281              	.LCFI3:
 282              		.cfi_def_cfa_offset 12
 283              		.cfi_offset 4, -12
 284              		.cfi_offset 5, -8
 285              		.cfi_offset 14, -4
 286              		.loc 1 120 0
 287 0002 4118     		adds	r1, r0, r1
 288              	.LVL32:
 121:uc_libc_dev/crc/crc.c **** 	u8 i, c;
 122:uc_libc_dev/crc/crc.c **** 	u8 crc;
 123:uc_libc_dev/crc/crc.c **** 	u8 * p = data;
 124:uc_libc_dev/crc/crc.c **** 	crc = 0x00;
 289              		.loc 1 124 0
 290 0004 0023     		movs	r3, #0
 125:uc_libc_dev/crc/crc.c **** 	while (length--) {
 291              		.loc 1 125 0
 292 0006 13E0     		b	.L21
 293              	.LVL33:
 294              	.L24:
 126:uc_libc_dev/crc/crc.c **** 		c = *p++;
 295              		.loc 1 126 0
 296 0008 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 297              	.LVL34:
 298 000c 0824     		movs	r4, #8
 299              	.LVL35:
 300              	.L23:
 127:uc_libc_dev/crc/crc.c **** 		for (i = 0; i < 8; i++) {
 128:uc_libc_dev/crc/crc.c **** 			crc = crc << 1;
 301              		.loc 1 128 0
 302 000e 5B00     		lsls	r3, r3, #1
 303 0010 DBB2     		uxtb	r3, r3
 304              	.LVL36:
 129:uc_libc_dev/crc/crc.c **** 			if ((c ^ crc) & 0x80) crc = crc ^ 0x09;
 305              		.loc 1 129 0
 306 0012 82EA0305 		eor	r5, r2, r3
 307 0016 15F0800F 		tst	r5, #128
 308 001a 18BF     		it	ne
 309 001c 83F00903 		eorne	r3, r3, #9
 310              	.LVL37:
 311 0020 013C     		subs	r4, r4, #1
 130:uc_libc_dev/crc/crc.c **** 			c = c << 1;
 312              		.loc 1 130 0
 313 0022 5200     		lsls	r2, r2, #1
 127:uc_libc_dev/crc/crc.c **** 		for (i = 0; i < 8; i++) {
 314              		.loc 1 127 0
 315 0024 14F0FF04 		ands	r4, r4, #255
 316              		.loc 1 130 0
 317 0028 D2B2     		uxtb	r2, r2
 318              	.LVL38:
 127:uc_libc_dev/crc/crc.c **** 		for (i = 0; i < 8; i++) {
 319              		.loc 1 127 0
 320 002a F0D1     		bne	.L23
 131:uc_libc_dev/crc/crc.c **** 		}
 132:uc_libc_dev/crc/crc.c **** 		crc = crc & 0x7F;
 321              		.loc 1 132 0
 322 002c 03F07F03 		and	r3, r3, #127
 323              	.LVL39:
 324              	.L21:
 125:uc_libc_dev/crc/crc.c **** 	while (length--) {
 325              		.loc 1 125 0 discriminator 1
 326 0030 8842     		cmp	r0, r1
 327 0032 E9D1     		bne	.L24
 133:uc_libc_dev/crc/crc.c **** 	}
 134:uc_libc_dev/crc/crc.c **** 	return crc * 2 + 1;
 328              		.loc 1 134 0
 329 0034 5B00     		lsls	r3, r3, #1
 330              	.LVL40:
 331 0036 581C     		adds	r0, r3, #1
 332              	.LVL41:
 135:uc_libc_dev/crc/crc.c **** }
 333              		.loc 1 135 0
 334 0038 C0B2     		uxtb	r0, r0
 335 003a 30BD     		pop	{r4, r5, pc}
 336              		.cfi_endproc
 337              	.LFE7:
 339              		.section	.text.crc8_HEX,"ax",%progbits
 340              		.align	1
 341              		.global	crc8_HEX
 342              		.thumb
 343              		.thumb_func
 345              	crc8_HEX:
 346              	.LFB8:
 136:uc_libc_dev/crc/crc.c **** 
 137:uc_libc_dev/crc/crc.c **** 
 138:uc_libc_dev/crc/crc.c **** //padrão de checksum de arquivos tipo "intel hex"
 139:uc_libc_dev/crc/crc.c **** u8 crc8_HEX(void * data, int length) {
 347              		.loc 1 139 0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 0
 350              		@ frame_needed = 0, uses_anonymous_args = 0
 351              		@ link register save eliminated.
 352              	.LVL42:
 353              		.loc 1 139 0
 354 0000 4118     		adds	r1, r0, r1
 355              	.LVL43:
 140:uc_libc_dev/crc/crc.c **** 	u8 r = 0;
 356              		.loc 1 140 0
 357 0002 0023     		movs	r3, #0
 141:uc_libc_dev/crc/crc.c **** 	u8 * p = data;
 142:uc_libc_dev/crc/crc.c **** 	while (length--) r += *p++;
 358              		.loc 1 142 0
 359 0004 03E0     		b	.L27
 360              	.LVL44:
 361              	.L28:
 362              		.loc 1 142 0 is_stmt 0 discriminator 2
 363 0006 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 364              	.LVL45:
 365 000a 9B18     		adds	r3, r3, r2
 366              	.LVL46:
 367 000c DBB2     		uxtb	r3, r3
 368              	.LVL47:
 369              	.L27:
 370              		.loc 1 142 0 discriminator 1
 371 000e 8842     		cmp	r0, r1
 372 0010 F9D1     		bne	.L28
 143:uc_libc_dev/crc/crc.c **** 	return -r;
 373              		.loc 1 143 0 is_stmt 1
 374 0012 5842     		negs	r0, r3
 375              	.LVL48:
 144:uc_libc_dev/crc/crc.c **** }
 376              		.loc 1 144 0
 377 0014 C0B2     		uxtb	r0, r0
 378 0016 7047     		bx	lr
 379              		.cfi_endproc
 380              	.LFE8:
 382              		.text
 383              	.Letext0:
 384              		.file 2 "uc_libc_dev/_libdef/uc_libdefs.h"
DEFINED SYMBOLS
                            *ABS*:00000000 crc.c
C:\Users\alex\AppData\Local\Temp\ccGAnUeg.s:19     .text.crc16_Right:00000000 $t
C:\Users\alex\AppData\Local\Temp\ccGAnUeg.s:23     .text.crc16_Right:00000000 crc16_Right
C:\Users\alex\AppData\Local\Temp\ccGAnUeg.s:115    .text.crc16_NBR14522:00000000 $t
C:\Users\alex\AppData\Local\Temp\ccGAnUeg.s:120    .text.crc16_NBR14522:00000000 crc16_NBR14522
C:\Users\alex\AppData\Local\Temp\ccGAnUeg.s:139    .text.crc16_MODBUS:00000000 $t
C:\Users\alex\AppData\Local\Temp\ccGAnUeg.s:144    .text.crc16_MODBUS:00000000 crc16_MODBUS
C:\Users\alex\AppData\Local\Temp\ccGAnUeg.s:163    .text.crc16_XMODEM:00000000 $t
C:\Users\alex\AppData\Local\Temp\ccGAnUeg.s:168    .text.crc16_XMODEM:00000000 crc16_XMODEM
C:\Users\alex\AppData\Local\Temp\ccGAnUeg.s:232    .text.crc16_DNP3:00000000 $t
C:\Users\alex\AppData\Local\Temp\ccGAnUeg.s:237    .text.crc16_DNP3:00000000 crc16_DNP3
C:\Users\alex\AppData\Local\Temp\ccGAnUeg.s:268    .text.crc7:00000000 $t
C:\Users\alex\AppData\Local\Temp\ccGAnUeg.s:273    .text.crc7:00000000 crc7
C:\Users\alex\AppData\Local\Temp\ccGAnUeg.s:340    .text.crc8_HEX:00000000 $t
C:\Users\alex\AppData\Local\Temp\ccGAnUeg.s:345    .text.crc8_HEX:00000000 crc8_HEX
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
